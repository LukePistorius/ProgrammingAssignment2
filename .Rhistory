makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b<-makeCacheMatrix(1:3)
x
b$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
m
}
rm(list=ls())
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
m
}
C<-makeCacheMatrix(1:9)
cacheSolve(c)
cacheSolve(C)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve(C)
a<-rbind(c(1, -1/4), c(-1/4, 1))
class(a)
d<-makeCacheMatrix(a)
cacheSolve(d)
d$get()
d<-makeCacheMatrix(a)
cacheSolve(d)
cacheSolve(d)
e<-cacheSolve(d)
d*e
a<-rbind(c(1, 2), c(2, 1))
c<-makeCacheMatrix(a)
c$set()
c$get()
c$setinverse()
c$getinverse()
cacheSolve(c)
c$set()
c$getinverse()
c$setinverse()
rm(list=ls())
## The below 2 functions work together: the first on you enter the matrix
## it sets a default (NULL) for i --> if it's the first time this
## matrix has been inversed this will be NULL.
## it also creates a list.
## (after using this before using cachesolve x$get = the matrix)
## the second function will do a lookup to X$getinverse() if it's NULL then
## we know it hasn't been cached if there is a value it will return the inverse.
## it will then get the x matrix and inverse it with the solve function
## after that it will store it
# 1) setting the defaults and x
# 2) save it to the parent environment and not in the functions environment (Caching)
# 3) creating a list with 4 functions in it
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# it takes the list created from above as an entree
# checks if i = NULL, if not then it has been calculated before and it needs to come from the cash
# if it's the first time, it needs to be calculated and saved
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
a<-cbind(c(1,2,3),c(2,2,2),c(3,5,6))
class(a)
b<-makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
d<-cbind(c(2,2,-1),c(3,3,3),c(3,5,6))
e<-makeCacheMatrix(d)
cacheSolve(b)
cacheSolve(e)
cacheSolve(b)
